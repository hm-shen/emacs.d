#+TITLE: Emacs Configs
#+AUTHOR: Haoming Shen
#+PROPERTY: header-args :tangle yes :results silent
#+STARTUP: overview indent

* Initialization

  Default settings

  #+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))
    (defvar temp--file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)
    (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ; which directory to put backups file
          auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ;transform backups file name
          fill-column 80   ; toggle wrapping text at the 80th character
          scroll-conservatively 101         ;
          ispell-program-name "aspell")
    (with-eval-after-load 'tramp
      (setq tramp-default-method "ssh"))
    (with-eval-after-load 'display-line-numbers
      (setq display-line-numbers-type 'relative
            display-line-numbers-width-start t))
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
    (setq-default indent-tabs-mode nil)
    (global-hl-line-mode 1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (blink-cursor-mode 0)
    (winner-mode 1)
    (put 'narrow-to-region 'disabled nil)
    (add-to-list 'load-path "~/.emacs.d/local/")
  #+END_SRC

  We’re going to set the load-path ourselves and avoid calling
  (package-initilize) (for performance reasons) so we need to set
  package--init-file-ensured to true to tell package.el to not
  automatically call it on our behalf. Additionally we’re setting
  package-enable-at-startup to nil so that packages will not
  automatically be loaded for us since use-package will be handling
  that.

 #+BEGIN_SRC emacs-lisp
   (eval-and-compile
     (setq load-prefer-newer t
           package-user-dir "~/.emacs.d/elpa"
           package--init-file-ensured t
           package-enable-at-startup nil)

     (unless (file-directory-p package-user-dir)
       (make-directory package-user-dir t))

     (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))


   (eval-when-compile
     (require 'package)
     ;; tells emacs not to load any packages before starting up
     ;; the following lines tell emacs where on the internet to look up
     ;; for new packages.
     (setq package-archives '(("melpa"     . "https://melpa.org/packages/")
                              ("elpa"      . "https://elpa.gnu.org/packages/")
                              ("repo-org"  . "https://orgmode.org/elpa/")))
     ;; (package-initialize)
     (unless package--initialized (package-initialize t))

     ;; Bootstrap `use-package'
     (unless (package-installed-p 'use-package) ; unless it is already installed
       (package-refresh-contents) ; updage packages archive
       (package-install 'use-package)) ; and install the most recent version of use-package

     (require 'use-package)
     (setq use-package-always-ensure t))
 #+END_SRC




* Visuals

** Font Face

#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((font . "Courier 10 Pitch-13")))
  ;; (setq doom-font (font-spec :family "Monaco" :size 13))
  ;; (setq doom-font (font-spec :family "Source Code Pro" :size 13))
  ;; (setq doom-font (font-spec :family "Courier New" :size 13))
  ;; (setq doom-font (font-spec :family "Courier 10 Pitch" :size 13))
  ;; (setq doom-font (font-spec :family "Fira Code" :size 13))
  ;; (setq doom-font (font-spec :family "Consolas" :size 13))
#+END_SRC


** Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  (use-package anti-zenburn-theme
    :ensure t)
  ;; (load-theme 'doom-solarized-light t)
  (load-theme 'doom-opera-light t)
#+end_src


** Modeline

#+begin_src emacs-lisp
  ;; Hide all minor modes in modeline
  ;; (use-package minions
  ;;   :ensure t
  ;;   :config (minions-mode 1))
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    (setq doom-modeline-height 20)
    :config
    (setq doom-modeline-window-width-limit fill-column)
    (setq doom-modeline-major-mode-color-icon nil
          all-the-icons-color-icons nil))
  (setq display-time-format "%H:%M:%S")
  (display-time-mode 1)
#+end_src



* Packages

** General Editing

#+begin_src emacs-lisp
  ;; Auto revert file when pdf is updated:
  (global-auto-revert-mode t)
#+end_src


** which-key

   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :config (which-key-mode 1))
   #+END_SRC


** general.el

#+BEGIN_SRC emacs-lisp
(use-package general
  :after which-key
  :config
  (general-override-mode 1)

  (defun find-user-init-file ()
    "Edit the `user-init-file', in same window."
    (interactive)
    (find-file user-init-file))
  (defun load-user-init-file ()
    "Load the `user-init-file', in same window."
    (interactive)
    (load-file user-init-file))

  ;;Taken from http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
  (defun rename-file-and-buffer ()
    "Rename the current buffer and file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer is not visiting a file!")
        (let ((new-name (read-file-name "New name: " filename)))
          (cond
           ((vc-backend filename) (vc-rename-file filename new-name))
           (t
            (rename-file filename new-name t)
            (set-visited-file-name new-name t t)))))))


  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  ;; Following lines to cycle through themes adapted from ivan's answer on
  ;; https://emacs.stackexchange.com/questions/24088/make-a-function-to-toggle-themes
  (setq my/themes (custom-available-themes))
  (setq my/themes-index 0)

  (defun my/cycle-theme ()
    "Cycles through my themes."
    (interactive)
    (setq my/themes-index (% (1+ my/themes-index) (length my/themes)))
    (my/load-indexed-theme))

  (defun my/load-indexed-theme ()
    (load-theme (nth my/themes-index my/themes)))

  (defun load-leuven-theme ()
    "Loads `leuven' theme"
    (interactive)
    (load-theme 'leuven))

  (defun load-dichromacy-theme ()
    "Loads `dichromacy' theme"
    (interactive)
    (load-theme 'dichromacy))

  (general-create-definer tyrant-def
    :states '(normal visual insert motion emacs)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-create-definer despot-def
    :states '(normal insert)
    :prefix "SPC"
    :non-normal-prefix "C-SPC")

  (general-define-key
    :keymaps 'key-translation-map
    "ESC" (kbd "C-g"))

  (general-def
    "C-x x" 'eval-defun)

  (tyrant-def
    ""     nil
    "c"   (general-simulate-key "C-c")
    "h"   (general-simulate-key "C-h")
    "u"   (general-simulate-key "C-u")
    "x"   (general-simulate-key "C-x")

    ;; Package manager
    "lp"  'list-packages

    ;; Theme operations
    "t"   '(:ignore t :which-key "themes")
    "tn"  'my/cycle-theme
    "tt"  'load-theme
    "tl"  'load-leuven-theme
    "td"  'load-dichromacy-theme

    ;; Quit operations
    "q"	  '(:ignore t :which-key "quit emacs")
    "qq"  'kill-emacs
    "qz"  'delete-frame

    ;; Buffer operations
    "b"   '(:ignore t :which-key "buffer")
    "bb"  'mode-line-other-buffer
    "bk"  'kill-this-buffer
    "bn"  'next-buffer
    "bp"  'previous-buffer
    ;; "bk"  'kill-buffer-and-window
    "bR"  'rename-file-and-buffer
    "br"  'revert-buffer

    ;; Window operations
    "w"   '(:ignore t :which-key "window")
    "wm"  'maximize-window
    "w/"  'split-window-horizontally
    "wv"  'split-window-vertically
    "wm"  'maximize-window
    "wu"  'winner-undo
    "ww"  'other-window
    "wc"  'delete-window
    "wC"  'delete-other-windows

    ;; File operations
    "f"   '(:ignore t :which-key "files")
    "fc"  'write-file
    "fe"  '(:ignore t :which-key "emacs")
    "fed" 'find-user-init-file
    "feR" 'load-user-init-file
    "fj"  'dired-jump
    "fl"  'find-file-literally
    "fR"  'rename-file-and-buffer
    "fs"  'save-buffer

    ;; Applications
    "a"   '(:ignore t :which-key "Applications")
    "ad"  'dired
    ":"   'shell-command
    ";"   'eval-expression
    "ac"  'calendar
    "oa"  'org-agenda)

  (general-def 'normal doc-view-mode-map
    "j"   'doc-view-next-line-or-next-page
    "k"   'doc-view-previous-line-or-previous-page
    "gg"  'doc-view-first-page
    "G"   'doc-view-last-page
    "C-d" 'doc-view-scroll-up-or-next-page
    "C-f" 'doc-view-scroll-up-or-next-page
    "C-b" 'doc-view-scroll-down-or-previous-page)

  (general-def '(normal visual) outline-minor-mode-map
    "zn"  'outline-next-visible-heading
    "zp"  'outline-previous-visible-heading
    "zf"  'outline-forward-same-level
    "zB"  'outline-backward-same-level)

  (general-def 'normal package-menu-mode-map
    "i"   'package-menu-mark-install
    "U"   'package-menu-mark-upgrades
    "d"   'package-menu-mark-delete
    "u"   'package-menu-mark-unmark
    "x"   'package-menu-execute
    "q"   'quit-window)

  (general-def 'normal calendar-mode-map
    "h"   'calendar-backward-day
    "j"   'calendar-forward-week
    "k"   'calendar-backward-week
    "l"   'calendar-forward-day
    "0"   'calendar-beginning-of-week
    "^"   'calendar-beginning-of-week
    "$"   'calendar-end-of-week
    "["   'calendar-backward-year
    "]"   'calendar-forward-year
    "("   'calendar-beginning-of-month
    ")"   'calendar-end-of-month
    "SPC" 'scroll-other-window
    "S-SPC" 'scroll-other-window-down
    "<delete>" 'scroll-other-window-down
    "<"   'calendar-scroll-right
    ">"   'calendar-scroll-left
    "C-b" 'calendar-scroll-right-three-months
    "C-f" 'calendar-scroll-left-three-months
    "{"   'calendar-backward-month
    "}"   'calendar-forward-month
    "C-k" 'calendar-backward-month
    "C-j" 'calendar-forward-month
    "gk"  'calendar-backward-month
    "gj"  'calendar-forward-month
    "v"   'calendar-set-mark
    "."   'calendar-goto-today
    "q"   'calendar-exit))
#+END_SRC


** suggest

   #+BEGIN_SRC emacs-lisp
   (use-package suggest
   :general (tyrant-def "as" 'suggest))
   #+END_SRC


** ranger

   #+BEGIN_SRC emacs-lisp
   (use-package ranger
     :hook (after-init . ranger-override-dired-mode)
     :general (tyrant-def "ar" 'ranger))
   #+END_SRC


** evil mode

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-C-u-scroll t)
       :hook (after-init . evil-mode)
       :config
       (setcdr evil-insert-state-map nil)
       (define-key evil-insert-state-map [escape] 'evil-normal-state)
       (evil-set-initial-state 'shell-mode 'normal)
       (evil-set-initial-state 'doc-view-mode 'normal)
       (evil-set-initial-state 'package-menu-mode 'normal)
       (evil-set-initial-state 'biblio-selection-mode 'motion)
       (setq doc-view-continuous t)
       :general
       (tyrant-def
         "wh"  'evil-window-left
         "wl"  'evil-window-right
         "wj"  'evil-window-down
         "wk"  'evil-window-up
         "bN"  'evil-buffer-new))
   #+END_SRC

   Other related evil minor modes
   #+BEGIN_SRC emacs-lisp
     (use-package evil-numbers
       :ensure t
       :after evil
       :general
       ('normal "C-=" 'evil-numbers/inc-at-pt
                "C--" 'evil-numbers/dec-at-pt))

     (use-package evil-surround
       :ensure t
       :after evil
       :config (global-evil-surround-mode 1))

     (use-package evil-easymotion
       :ensure t
       :after evil
       :config
       (evilem-default-keybindings "gs"))

     (use-package evil-commentary
       :ensure t
       :after evil
       :config (evil-commentary-mode 1)

       :general
       ('normal override-global-map
         "gc"  'evil-commentary
         "gC" 'evil-commentary-line))

     (use-package evil-visualstar
       :ensure t
       :after evil
       :config
       (setq evilmi-always-simple-jump t)
       (global-evil-visualstar-mode 1))

     (use-package evil-vimish-fold
       :ensure t
       :after evil
       :init
       (setq evil-vimish-fold-target-modes '(prog-mode conf-mode text-mode))
       :config
       (global-evil-vimish-fold-mode))
   #+END_SRC



** company mode

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :hook (after-init . global-company-mode)
       :config
       (define-key company-active-map (kbd "M-n") nil)
       (define-key company-active-map (kbd "M-p") nil)
       (define-key company-active-map (kbd "C-n") #'company-select-next-or-abort)
       (define-key company-active-map (kbd "C-p") #'company-select-previous-or-abort)
       (setq company-frontends '(company-echo-metadata-frontend
                                 company-pseudo-tooltip-unless-just-one-frontend
                                 company-preview-frontend))
       (setq company-backends '((company-capf
                                 company-files)
                                (company-dabbrev-code company-keywords)
                                 company-dabbrev company-yasnippet)))

     (use-package company-quickhelp
       :defer 5
       :config (company-quickhelp-mode))

     (use-package company-statistics
       :defer 5
       :config (company-statistics-mode))
   #+END_SRC


** Projectile

   #+BEGIN_SRC emacs-lisp
   (use-package projectile)
   #+END_SRC


** Narrowing systems

   #+BEGIN_SRC emacs-lisp
   (defvar narrowing-system "helm"
     "Sets the narrowing system to use - helm or ivy")
   #+END_SRC

*** ivy

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
         :if (equal narrowing-system "ivy")
         :hook (after-init . ivy-mode)
         :config (setq ivy-use-virtual-buffers t
                     ivy-count-format "(%d/%d) "
                     ivy-initial-inputs-alist nil
                     ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
         :commands (ivy-switch-buffer)
         :general
         (tyrant-def "bm"  'ivy-switch-buffer))

     (use-package smex
       :if (equal narrowing-system "ivy"))

     (use-package counsel
       :after (ivy)
       :general
       (tyrant-def
         "SPC" 'counsel-M-x
         "ff"  'counsel-find-file
         "fr"  'counsel-recentf
         "fL"  'counsel-locate))

     (use-package flyspell-correct-ivy
       :if (equal narrowing-system "ivy")
       :commands (flyspell-correct-word-generic)
       :general
        (:keymaps '(flyspell-mode-map)
         :states '(normal visual)
         "zs" 'flyspell-correct-word-generic
         "z=" 'flyspell-buffer))

     (use-package counsel-projectile
       :after (projectile ivy)
       :general
       (tyrant-def
        "p"   '(:ignore t :which-key "projectile")
        "pd"  'counsel-projectile-dired-find-dir
        "po"  'counsel-projectile-find-other-file
        "pf"  'counsel-projectile-find-file
        "fp"  'counsel-projectile-find-file
        "pb"  'counsel-projectile-switch-to-buffer))
   #+END_SRC


*** helm

    #+BEGIN_SRC emacs-lisp
   (use-package helm
     :if (equal narrowing-system "helm")
     :hook (after-init . helm-mode)
     :config (require 'helm-config)
     :commands (helm-mini
                helm-find-files
                helm-recentf
                helm-locate
                helm-M-x
                helm-flyspell-correct)
     :general
     (tyrant-def
      "SPC" 'helm-M-x
      "bl"  'helm-mini
      "ff"  'helm-find-files
      "fr"  'helm-recentf
      "fL"  'helm-locate))

   (use-package helm-flyspell
     :if (equal narrowing-system "helm")
     :commands (helm-flyspell-correct)
     :general
      (:keymaps '(flyspell-mode-map)
       :states '(normal visual)
       "zs" 'helm-flyspell-correct
       "z=" 'flyspell-buffer))

   (use-package helm-projectile
     :after (projectile helm)
     :general
     (tyrant-def
      "p"   '(:ignore t :which-key "projectile")
      "pd"  'helm-projectile-dired-find-dir
      "po"  'helm-projectile-find-other-file
      "pf"  'helm-projectile-find-file
      "fp"  'helm-projectile-find-file
      "pb"  'helm-projectile-switch-to-buffer))
    #+END_SRC


** flycheck

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :commands (flycheck-mode)
       :general
       (tyrant-def
        "e"   '(:ignore t :which-key "Errors")
        "en"  'flycheck-next-error
        "ep"  'flycheck-previous-error))
   #+END_SRC


** magit

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :commands (magit-status)
       :general
       (tyrant-def
        "g"   '(:ignore t :which-key "git")
        "gs"  'magit-status))

     ;; (use-package evil-magit
     ;;   :hook (magit-mode . evil-magit-init))
   #+END_SRC


** For programming

*** Tramp

#+begin_src emacs-lisp
(require 'tramp)
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
(setq tramp-ssh-controlmaster-options "")
#+end_src


*** Python 

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "~/Software/miniconda3/bin/python3")
  (use-package company-jedi
    :if (executable-find "virtualenv")
    :ensure t
    :hook (python-mode . my-python-mode-hook)
    :config
    (defun my-python-mode-hook ()
      (setq-local company-backends '(company-jedi)))
    (if (eq system-type 'darwin)
      (setq python-shell-exec-path "~/Software/miniconda3/bin"
            python-shell-interpreter "~/Software/miniconda3/bin/python")
      (setq python-shell-interpreter "python3"))
    :general
     ('(normal visual) python-mode-map
      "]]"  'python-nav-forward-defun
      "[["  'python-nav-backward-defun
      "gj"  'python-nav-forward-block
      "gk"  'python-nav-backward-block)
    (despot-def python-mode-map
     ""      nil
     "mg"   'jedi:goto-definition
     "mb"   'jedi:goto-definition-pop-marker))

  ;; (use-package yapfify
  ;;   :hook (python-mode . yapf-mode))

  (use-package sphinx-doc
    :hook (python-mode . sphinx-doc-mode)
    :general
    (despot-def python-mode-map
     "ms"   'sphinx-doc))

  (use-package yasnippet
    :hook ((prog-mode org-mode) . yas-minor-mode)
    :general
    (tyrant-def
     "y"   '(:ignore t :which-key "yasnippet")
     "yi"  'yas-insert-snippet
     "yv"  'yas-visit-snippet-file
     "yn"  'yas-new-snippet))

  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC



* Global key-bindings

** Agenda & Diary

#+begin_src emacs-lisp :tangle yes
(defun doom/open-agenda (&optional arg)
  "Open org-agenda directly"
  (interactive "p")
  (org-agenda arg "a"))

(defun doom/open-diary ()
  "Open org-agenda directly"
  (interactive)
  (find-file "~/Documents/Org/diary.org"))

(defun doom/open-gtd ()
  "Open org-agenda directly"
  (interactive)
  (find-file "~/Documents/Org/gtd.org"))
#+end_src

** LaTeX Bibtex

#+begin_src emacs-lisp :tangle yes
(defun doom/open-mybibs ()
  "Open org-agenda directly"
  (interactive)
  (find-file "~/Documents/5-Papers/master.bib"))
#+end_src

** Research Notes

#+begin_src emacs-lisp :tangle yes
(defun doom/open-research ()
  "Open org-agenda directly"
  (interactive)
  (find-file "~/Documents/4-Notes/3-Research/research.org"))
#+end_src

** Global Mappings

#+begin_src emacs-lisp
  (require 'general)
  (general-define-key
   "M-x" 'helm-M-x)
  (general-def 'normal
   "<f6>" 'helm-bibtex
   "<f7>" #'doom/open-diary
   "<f8>" #'doom/open-gtd
   "<f9>" #'doom/open-agenda
   "<f10>" 'my/copy-idlink-to-clipboard)
#+end_src

#+begin_src emacs-lisp
;;(global-set-key)
#+end_src


* Other configs

** Better comment box

Souce: http://pragmaticemacs.com/emacs/comment-boxes/
#+begin_src emacs-lisp :tangle yes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Full width comment box                                                 ;;
;; from http://irreal.org/blog/?p=374                                     ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun bjm-comment-box (b e)
"Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."

(interactive "r")

(let ((e (copy-marker e t)))
  (goto-char b)
  (end-of-line)
  (insert-char ?  (- fill-column (current-column)))
  (comment-box b e 1)
  (goto-char e)
  (set-marker e nil)))
#+end_src

  #+BEGIN_SRC emacs-lisp
    ;; (defun my-prog-mode-hook ()
    ;;   ;; (auto-fill-mode)
    ;;   (show-paren-mode)
    ;;   (whitespace-mode)
    ;;   (electric-pair-mode)
    ;;   (flycheck-mode)
    ;;   (display-line-numbers-mode))

    ;; (add-hook 'prog-mode-hook 'my-prog-mode-hook)
    ;; (setq before-save-hook 'nil)

    ;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

  #+END_SRC


** Pre-append line number to each line

source: https://emacs.stackexchange.com/questions/47633/elisp-program-to-insert-line-numbers-into-a-buffer

#+begin_src emacs-lisp
(defun number-region (start end)
  (interactive "r")
  (save-restriction
    (narrow-to-region start end)
    (goto-char (point-min))
    (let ((counter 0))
      (while (re-search-forward "^" nil t)
        (setq counter (+ 1 counter))
        (replace-match (format "%d" counter) nil nil)))))
#+end_src


* Post-processing

  #+BEGIN_SRC emacs-lisp
    (eval-when-compile
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
    (load custom-file)))

    (eval-and-compile
    (add-hook 'emacs-startup-hook '(lambda ()
                    (setq gc-cons-threshold 16777216 gc-cons-percentage 0.1
                            file-name-handler-alist temp--file-name-handler-alist))))
    (setq initial-scratch-message (concat "Startup time: " (emacs-init-time)))
  #+END_SRC
